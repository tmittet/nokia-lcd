/************************************************************************/
/* Driver for the Nokia Graphic LCD 84x48, v1.0.                        */
/* Based on library written by Sylvain Bissonnette and Louis Frigon:    */
/* http://www.microsyl.com/index.php/2010/03/24/nokia-lcd-library/      */
/*                                                                      */
/* This library is free software: you can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation, either version 3 of the License, or    */
/* (at your option) any later version.                                  */
/*                                                                      */
/* This library is distributed in the hope that it will be useful, but  */
/* WITHOUT ANY WARRANTY; without even the implied warranty of           */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU     */
/* General Public License for more details.                             */
/*                                                                      */
/* You should have received a copy of the GNU General Public License    */
/* along with this library. If not, see <http://www.gnu.org/licenses/>. */
/*                                                                      */
/* Written by Thomas Mittet code@lookout.no September 2011.             */
/************************************************************************/

#include "NokiaLCD.h"

const uint8_t NokiaLCD::FONT[95][5] =
{
   {0x00, 0x00, 0x00, 0x00, 0x00} // Space
  ,{0x00, 0x00, 0x5f, 0x00, 0x00} // !
  ,{0x00, 0x07, 0x00, 0x07, 0x00} // "
  ,{0x14, 0x7f, 0x14, 0x7f, 0x14} // #
  ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // $
  ,{0x23, 0x13, 0x08, 0x64, 0x62} // %
  ,{0x36, 0x49, 0x55, 0x22, 0x50} // &
  ,{0x00, 0x05, 0x03, 0x00, 0x00} // '
  ,{0x00, 0x1c, 0x22, 0x41, 0x00} // (
  ,{0x00, 0x41, 0x22, 0x1c, 0x00} // )
  ,{0x14, 0x08, 0x3e, 0x08, 0x14} // *
  ,{0x08, 0x08, 0x3e, 0x08, 0x08} // +
  ,{0x00, 0x50, 0x30, 0x00, 0x00} // ,
  ,{0x08, 0x08, 0x08, 0x08, 0x08} // -
  ,{0x00, 0x60, 0x60, 0x00, 0x00} // .
  ,{0x20, 0x10, 0x08, 0x04, 0x02} // /
  ,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 0
  ,{0x00, 0x42, 0x7f, 0x40, 0x00} // 1
  ,{0x42, 0x61, 0x51, 0x49, 0x46} // 2
  ,{0x21, 0x41, 0x45, 0x4b, 0x31} // 3
  ,{0x18, 0x14, 0x12, 0x7f, 0x10} // 4
  ,{0x27, 0x45, 0x45, 0x45, 0x39} // 5
  ,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 6
  ,{0x01, 0x71, 0x09, 0x05, 0x03} // 7
  ,{0x36, 0x49, 0x49, 0x49, 0x36} // 8
  ,{0x06, 0x49, 0x49, 0x29, 0x1e} // 9
  ,{0x00, 0x36, 0x36, 0x00, 0x00} // :
  ,{0x00, 0x56, 0x36, 0x00, 0x00} // ;
  ,{0x08, 0x14, 0x22, 0x41, 0x00} // <
  ,{0x14, 0x14, 0x14, 0x14, 0x14} // =
  ,{0x00, 0x41, 0x22, 0x14, 0x08} // >
  ,{0x02, 0x01, 0x51, 0x09, 0x06} // ?
  ,{0x32, 0x49, 0x79, 0x41, 0x3e} // @
  ,{0x7e, 0x11, 0x11, 0x11, 0x7e} // A
  ,{0x7f, 0x49, 0x49, 0x49, 0x36} // B
  ,{0x3e, 0x41, 0x41, 0x41, 0x22} // C
  ,{0x7f, 0x41, 0x41, 0x22, 0x1c} // D
  ,{0x7f, 0x49, 0x49, 0x49, 0x41} // E
  ,{0x7f, 0x09, 0x09, 0x09, 0x01} // F
  ,{0x3e, 0x41, 0x49, 0x49, 0x7a} // G
  ,{0x7f, 0x08, 0x08, 0x08, 0x7f} // H
  ,{0x00, 0x41, 0x7f, 0x41, 0x00} // I
  ,{0x20, 0x40, 0x41, 0x3f, 0x01} // J
  ,{0x7f, 0x08, 0x14, 0x22, 0x41} // K
  ,{0x7f, 0x40, 0x40, 0x40, 0x40} // L
  ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // M
  ,{0x7f, 0x04, 0x08, 0x10, 0x7f} // N
  ,{0x3e, 0x41, 0x41, 0x41, 0x3e} // O
  ,{0x7f, 0x09, 0x09, 0x09, 0x06} // P
  ,{0x3e, 0x41, 0x51, 0x21, 0x5e} // Q
  ,{0x7f, 0x09, 0x19, 0x29, 0x46} // R
  ,{0x46, 0x49, 0x49, 0x49, 0x31} // S
  ,{0x01, 0x01, 0x7f, 0x01, 0x01} // T
  ,{0x3f, 0x40, 0x40, 0x40, 0x3f} // U
  ,{0x1f, 0x20, 0x40, 0x20, 0x1f} // V
  ,{0x3f, 0x40, 0x38, 0x40, 0x3f} // W
  ,{0x63, 0x14, 0x08, 0x14, 0x63} // X
  ,{0x07, 0x08, 0x70, 0x08, 0x07} // Y
  ,{0x61, 0x51, 0x49, 0x45, 0x43} // Z
  ,{0x00, 0x7f, 0x41, 0x41, 0x00} // [
  ,{0x02, 0x04, 0x08, 0x10, 0x20} // Backslash
  ,{0x00, 0x41, 0x41, 0x7f, 0x00} // ]
  ,{0x04, 0x02, 0x01, 0x02, 0x04} // ^
  ,{0x40, 0x40, 0x40, 0x40, 0x40} // _
  ,{0x00, 0x01, 0x02, 0x04, 0x00} // `
  ,{0x20, 0x54, 0x54, 0x54, 0x78} // a
  ,{0x7f, 0x48, 0x44, 0x44, 0x38} // b
  ,{0x38, 0x44, 0x44, 0x44, 0x20} // c
  ,{0x38, 0x44, 0x44, 0x48, 0x7f} // d
  ,{0x38, 0x54, 0x54, 0x54, 0x18} // e
  ,{0x08, 0x7e, 0x09, 0x01, 0x02} // f
  ,{0x08, 0x54, 0x54, 0x54, 0x3c} // g
  ,{0x7f, 0x08, 0x04, 0x04, 0x78} // h
  ,{0x00, 0x44, 0x7d, 0x40, 0x00} // i
  ,{0x20, 0x40, 0x44, 0x3d, 0x00} // j 
  ,{0x7f, 0x10, 0x28, 0x44, 0x00} // k
  ,{0x00, 0x41, 0x7f, 0x40, 0x00} // l
  ,{0x7c, 0x04, 0x18, 0x04, 0x78} // m
  ,{0x7c, 0x08, 0x04, 0x04, 0x78} // n
  ,{0x38, 0x44, 0x44, 0x44, 0x38} // o
  ,{0x7c, 0x14, 0x14, 0x14, 0x08} // p
  ,{0x08, 0x14, 0x14, 0x14, 0x7c} // q
  ,{0x7c, 0x08, 0x04, 0x04, 0x08} // r
  ,{0x48, 0x54, 0x54, 0x54, 0x20} // s
  ,{0x04, 0x3f, 0x44, 0x40, 0x20} // t
  ,{0x3c, 0x40, 0x40, 0x20, 0x7c} // u
  ,{0x1c, 0x20, 0x40, 0x20, 0x1c} // v
  ,{0x3c, 0x40, 0x30, 0x40, 0x3c} // w
  ,{0x44, 0x28, 0x10, 0x28, 0x44} // x
  ,{0x0c, 0x50, 0x50, 0x50, 0x3c} // y
  ,{0x44, 0x64, 0x54, 0x4c, 0x44} // z
  ,{0x00, 0x08, 0x36, 0x41, 0x00} // {
  ,{0x00, 0x00, 0x7f, 0x00, 0x00} // |
  ,{0x00, 0x41, 0x36, 0x08, 0x00} // }
  ,{0x10, 0x08, 0x08, 0x10, 0x08} // ~
};

const uint8_t NokiaLCD::FONT_EXT[95][5] =
{
   {0x00, 0x00, 0x7d, 0x00, 0x00} // ¡
  ,{0x1c, 0x22, 0x7f, 0x22, 0x10} // ¢
  ,{0x48, 0x7e, 0x49, 0x49, 0x42} // £
  ,{0x44, 0x38, 0x28, 0x38, 0x44} // ¤
  ,{0x29, 0x2a, 0x7c, 0x2a, 0x29} // ¥
  ,{0x00, 0x00, 0x36, 0x00, 0x00} // ¦
  ,{0x0e, 0x55, 0x55, 0x55, 0x38} // §
  ,{0x00, 0x01, 0x00, 0x01, 0x00} // ¨
  ,{0x3e, 0x41, 0x5d, 0x55, 0x22} // ©
  ,{0x00, 0x09, 0x15, 0x1e, 0x10} // ª
  ,{0x10, 0x28, 0x54, 0x28, 0x44} // «
  ,{0x08, 0x08, 0x08, 0x08, 0x38} // ¬
  ,{0x08, 0x08, 0x08, 0x08, 0x08} // ­
  ,{0x3e, 0x41, 0x5d, 0x45, 0x3a} // ®
  ,{0x01, 0x01, 0x01, 0x01, 0x01} // ¯
  ,{0x00, 0x06, 0x09, 0x09, 0x06} // °
  ,{0x44, 0x44, 0x5f, 0x44, 0x44} // ±
  ,{0x00, 0x00, 0x1d, 0x15, 0x17} // ²
  ,{0x00, 0x00, 0x15, 0x15, 0x1f} // ³
  ,{0x00, 0x04, 0x02, 0x01, 0x00} // ´
  ,{0x04, 0x7c, 0x20, 0x20, 0x3c} // µ
  ,{0x06, 0x2f, 0x4f, 0x41, 0x3f} // ¶
  ,{0x00, 0x00, 0x08, 0x00, 0x00} // ·
  ,{0x00, 0x50, 0x60, 0x00, 0x00} // ¸
  ,{0x00, 0x00, 0x00, 0x02, 0x1f} // ¹
  ,{0x00, 0x26, 0x29, 0x29, 0x26} // º
  ,{0x44, 0x28, 0x54, 0x28, 0x10} // »
  ,{0x1f, 0x00, 0x1c, 0x10, 0x7c} // ¼
  ,{0x1f, 0x00, 0x74, 0x54, 0x5c} // ½
  ,{0x15, 0x15, 0x0e, 0x10, 0x7c} // ¾
  ,{0x30, 0x48, 0x45, 0x40, 0x20} // ¿
  ,{0x78, 0x15, 0x16, 0x14, 0x78} // À
  ,{0x78, 0x14, 0x16, 0x15, 0x78} // Á
  ,{0x7c, 0x16, 0x15, 0x16, 0x7c} // Â
  ,{0x7a, 0x15, 0x16, 0x15, 0x78} // Ã
  ,{0x78, 0x15, 0x14, 0x15, 0x78} // Ä
  ,{0x78, 0x17, 0x15, 0x17, 0x78} // Å
  ,{0x7c, 0x0a, 0x7f, 0x49, 0x49} // Æ
  ,{0x0e, 0x51, 0x31, 0x11, 0x08} // Ç
  ,{0x7c, 0x55, 0x56, 0x44, 0x00} // È
  ,{0x7c, 0x54, 0x56, 0x55, 0x44} // É
  ,{0x7c, 0x56, 0x55, 0x56, 0x44} // Ê
  ,{0x7c, 0x55, 0x54, 0x55, 0x44} // Ë
  ,{0x00, 0x44, 0x7d, 0x46, 0x00} // Ì
  ,{0x00, 0x46, 0x7d, 0x44, 0x00} // Í
  ,{0x00, 0x46, 0x7d, 0x46, 0x00} // Î
  ,{0x00, 0x45, 0x7c, 0x45, 0x00} // Ï
  ,{0x49, 0x7f, 0x49, 0x63, 0x1c} // Ð
  ,{0x7a, 0x09, 0x12, 0x21, 0x7c} // Ñ
  ,{0x38, 0x45, 0x46, 0x44, 0x38} // Ò
  ,{0x38, 0x44, 0x46, 0x45, 0x38} // Ó
  ,{0x38, 0x46, 0x45, 0x46, 0x38} // Ô
  ,{0x3a, 0x45, 0x46, 0x45, 0x38} // Õ
  ,{0x38, 0x45, 0x44, 0x45, 0x38} // Ö
  ,{0x00, 0x14, 0x08, 0x14, 0x00} // ×
  ,{0x5c, 0x32, 0x2a, 0x26, 0x1d} // Ø
  ,{0x3c, 0x41, 0x42, 0x40, 0x3c} // Ù
  ,{0x3c, 0x40, 0x42, 0x41, 0x3c} // Ú
  ,{0x38, 0x42, 0x41, 0x42, 0x38} // Û
  ,{0x3c, 0x41, 0x40, 0x41, 0x3c} // Ü
  ,{0x0c, 0x10, 0x72, 0x11, 0x0c} // Ý
  ,{0x7f, 0x55, 0x14, 0x1c, 0x00} // Þ
  ,{0x40, 0x7e, 0x49, 0x49, 0x36} // ß
  ,{0x20, 0x55, 0x56, 0x54, 0x78} // à
  ,{0x20, 0x56, 0x55, 0x54, 0x78} // á
  ,{0x20, 0x56, 0x55, 0x56, 0x78} // â
  ,{0x22, 0x55, 0x56, 0x55, 0x78} // ã
  ,{0x20, 0x55, 0x54, 0x55, 0x78} // ä
  ,{0x20, 0x57, 0x55, 0x57, 0x78} // å
  ,{0x74, 0x54, 0x7c, 0x54, 0x54} // æ
  ,{0x0e, 0x51, 0x31, 0x11, 0x08} // ç
  ,{0x38, 0x55, 0x56, 0x54, 0x18} // è
  ,{0x38, 0x54, 0x56, 0x55, 0x18} // é
  ,{0x38, 0x56, 0x55, 0x56, 0x18} // ê
  ,{0x38, 0x55, 0x54, 0x55, 0x18} // ë
  ,{0x00, 0x44, 0x7d, 0x42, 0x00} // ì
  ,{0x00, 0x46, 0x7d, 0x40, 0x00} // í
  ,{0x00, 0x46, 0x7d, 0x42, 0x00} // î
  ,{0x00, 0x45, 0x7c, 0x41, 0x00} // ï
  ,{0x00, 0x32, 0x4b, 0x4e, 0x38} // ð
  ,{0x7a, 0x05, 0x06, 0x05, 0x78} // ñ
  ,{0x38, 0x45, 0x46, 0x44, 0x38} // ò
  ,{0x38, 0x44, 0x46, 0x45, 0x38} // ó
  ,{0x38, 0x46, 0x45, 0x46, 0x38} // ô
  ,{0x3a, 0x45, 0x46, 0x45, 0x38} // õ
  ,{0x38, 0x45, 0x44, 0x45, 0x38} // ö
  ,{0x08, 0x08, 0x2a, 0x08, 0x08} // ÷
  ,{0x5c, 0x32, 0x2a, 0x26, 0x1d} // ø
  ,{0x3c, 0x41, 0x42, 0x20, 0x7c} // ù
  ,{0x3c, 0x40, 0x42, 0x21, 0x7c} // ú
  ,{0x3c, 0x42, 0x41, 0x22, 0x7c} // û
  ,{0x3c, 0x41, 0x40, 0x21, 0x7c} // ü
  ,{0x0c, 0x50, 0x52, 0x51, 0x3c} // ý
  ,{0x7f, 0x14, 0x14, 0x1c, 0x00} // þ
  ,{0x0c, 0x51, 0x50, 0x51, 0x3c} // ÿ
};

NokiaLCD::NokiaLCD(uint8_t clockPin, uint8_t dataPin, uint8_t modeSelectPin, uint8_t dataSelectPin, uint8_t resetPin)
{
  this->clockPin = clockPin;
  this->dataPin = dataPin;
  this->modeSelectPin = modeSelectPin;
  this->dataSelectPin = dataSelectPin;
  this->resetPin = resetPin;
}

void NokiaLCD::begin()
{
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(modeSelectPin, OUTPUT);
  pinMode(dataSelectPin, OUTPUT);
  pinMode(resetPin, OUTPUT);
  // Send reset signal to init display chip
  digitalWrite(resetPin, LOW);
  digitalWrite(resetPin, HIGH);
  // Enable data receive
  digitalWrite(dataSelectPin, DATA_ENABLED);
  // Set LCD to command mode
  digitalWrite(modeSelectPin, MODE_COMMAND);
  // Set extended commands
  writeByte(CHIP_CMD_EXTENDED);
  writeByte(TEMP_COEFFICIENT_2);
  // Set basic commands
  writeByte(CHIP_CMD_BASIC_H);
  writeByte(DISP_CONF_NORMAL);
  // Set LCD to data mode
  digitalWrite(modeSelectPin, MODE_DATA);
  // Reset cursor position and clear display
  clear();
}

void NokiaLCD::clear(void)
{
  setCursor();
  for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT / FONT_HEIGHT; i++)
  {
    writeByte(0x00);
  }
}

void NokiaLCD::setCursor(uint8_t line, uint8_t column)
{
  line--;
  column--;
  if (line >= LCD_HEIGHT / FONT_HEIGHT) line = 0;
  if (column >= 13) column = 0;
  currentColumn = column * FONT_WIDTH;
  digitalWrite(modeSelectPin, MODE_COMMAND);
  writeByte(RAM_ADDRESS_Y | line);
  writeByte(RAM_ADDRESS_X | currentColumn);
  digitalWrite(modeSelectPin, MODE_DATA);
}

void NokiaLCD::writeByte(uint8_t data)
{
  shiftOut(dataPin, clockPin, MSBFIRST, data);
}

void NokiaLCD::writeChar(uint8_t character)
{
  // Write font
  for (int i = 0; i < 5; i++)
  {
    writeByte(character < 0xA1 ? FONT[character - 0x20][i] : FONT_EXT[character - 0xA1][i]);
  }
  // Write 1 x 8 px whitespace after character
  // to leave some space between letters
  // Spacing below characters is taken care
  // of by font matrix, pixel 8 is never used
  writeByte(0x00);
  // Update current column
  currentColumn += FONT_WIDTH;
  currentColumn %= LCD_WIDTH;
}

void NokiaLCD::write(char *line)
{
  while (*line)
  {
    writeChar(*line++);
  }
}

void NokiaLCD::writeLine(char *line)
{
  write(line);
  // Fill rest of line with whitespace if
  // there are not enough characters.
  if (currentColumn)
  {
    while (LCD_WIDTH > currentColumn)
    {
      writeByte(0x00);
      currentColumn++;
    }
	currentColumn = 0;
  }
}